spec:
  inputs:
    appName: 
      description: Job 이름의 접두사로 사용할 앱 이름으로 고유하게 default 값을 지정해 주세요.
      default: "파이썬 예제"
    dirName:
      description: 현재 디렉토리로 devops 폴더 안의 폴더 이름을 default 값으로 지정해 주세요.
      default: "walking_skeleton_python"


---

stages:
  - preflight
  - build
  - test
  - push
  - deploy

include:
  - local: devops/ci-commons/general.gitlab-ci.yml # 일반 템플릿 로드
  - local: devops/ci-commons/python.gitlab-ci.yml # 파이썬 템플릿 로드
  - local: devops/ci-commons/helm.gitlab-ci.yml # 헬름 템플릿 로드
  - local: devops/ci-commons/kaniko.gitlab-ci.yml # kaniko 템플릿 로드
  - local: devops/ci-commons/argo.gitlab-ci.yml # argo 템플릿 로드

".$[[ inputs.appName ]].when_apps_changed": # rules:changes가 extends된 변수를 인식하지 못하는 버그가 있어서 추가로 작성 필요
  rules:
    - changes:
      - "apps/$[[ inputs.dirName ]]/**/*"
      - "$COMMON_PACKAGE_DIR"

".$[[ inputs.appName ]].skip_apps_changed": # rules:changes가 extends된 변수를 인식하지 못하는 버그가 있어서 추가로 작성 필요
  rules:
    - changes:
         - "apps/$[[ inputs.dirName ]]/**/*"
         - "$COMMON_PACKAGE_DIR"
      when: never

".$[[ inputs.appName ]].when_devops_changed": # rules:changes가 extends된 변수를 인식하지 못하는 버그가 있어서 추가로 작성 필요
  rules:
    - changes:
      - devops/$[[ inputs.dirName ]]/**/* 

".$[[ inputs.appName ]].skip_devops_changed": # rules:changes가 extends된 변수를 인식하지 못하는 버그가 있어서 추가로 작성 필요
  rules:
    - changes:
        - devops/$[[ inputs.dirName ]]/**/* 
      when: never

".$[[ inputs.appName ]].when_any_changed": # rules:changes가 extends된 변수를 인식하지 못하는 버그가 있어서 추가로 작성 필요
  rules:
    - changes:
      - "apps/$[[ inputs.dirName ]]/**/*"
      - "$COMMON_PACKAGE_DIR" 
      - "devops/$[[ inputs.dirName ]]/**/*" 

##################################################################
# 아래 variables에서 변수 값을 적절히 수정해 주세요.

".$[[ inputs.appName ]].variables": 
  variables:
    HELM_CHART_NAME: "walking-skeleton-python" # 헬름 차트 이름, 실제 헬름 차트의 name에 맞게 수정 필요
    HELM_CHART_VERSION: "0.1.0" # 헬름 차트 버전, 수정 필요
    IMAGE_NAME: "ws-python-image" # 도커 이미지 이름, 수정 필요
    ARGOCD_APP_NAME: "walking-skeleton-python" # 앱 이름, 수정 필요
    DIR_NAME: $[[ inputs.dirName ]]
    HELM_CHART_IMAGE_KEY: "ci-image" # 헬름 차트의 이미지 키, values.yaml에 들어갈 키, 필요 시 수정
    
    APPS_DIR_REL: "apps/${DIR_NAME}" # 코드 경로, 필요 시 수정
    DEVOPS_DIR_REL: "devops/${DIR_NAME}" # 데브옵스 경로, 필요 시 수정

    APPS_DIR: "${CI_PROJECT_DIR}/${APPS_DIR_REL}" 
    BUILD_CONTEXT_DIR: "${APPS_DIR}" # 빌드 컨텍스트 경로, 보통 앱 경로와 동일
    DEVOPS_DIR: "${CI_PROJECT_DIR}/${DEVOPS_DIR_REL}" 
    DOCKERFILE_DIR: "${APPS_DIR}/Dockerfile" # 도커파일 경로, 필요 시 수정
    HELM_CHART_DIR: "${DEVOPS_DIR}/helm" # 헬름 차트 경로, 필요 시 수정
    REQUIREMENT_DIR: "${APPS_DIR}/requirements.txt" # requirements.txt 파일 경로, 필요 시 수정
    
    PYLINT_FAIL_UNDER: 3 # 린트 실패 기준선   
    PYTHON_IMAGE: "python:3.12.1-slim" # 파이썬 이미지, 필요 시 수정

##################################################################


"$[[ inputs.appName ]], CI 로드 확인":  # 해당 CI 파일 로드 확인용
  stage: preflight
  script:
    - echo "$[[ inputs.appName ]] CI 확인 완료"    

"$[[ inputs.appName ]], pip 로드":
  extends: 
    - ".$[[ inputs.appName ]].variables"
    - .pip_push    
    - ".$[[ inputs.appName ]].when_apps_changed"
  image: ${PYTHON_IMAGE}
  stage: preflight
  script:
    - echo "pip fetch done!"

"$[[ inputs.appName ]], 린트":
  extends: 
    - ".$[[ inputs.appName ]].variables"
    - .pip_pull
    - ".$[[ inputs.appName ]].when_apps_changed"
  image: ${PYTHON_IMAGE}
  stage: preflight
  script:
    - cd "${APPS_DIR}"
    - pip install -r "$DEVOPS_DIR/lint-requirements.txt"
    - pylint *.py --ignore-patterns=test* 
      --fail-under="${PYLINT_FAIL_UNDER}" 
      --disable C0114,C0115,C0116 # docstring 관련 린트 비활성화

"$[[ inputs.appName ]], 빌드":
  extends: 
    - ".$[[ inputs.appName ]].variables"
    - .kaniko_push
    - ".$[[ inputs.appName ]].when_apps_changed"
  stage: build
  after_script:
    - echo "Done building and uploading image!"

"$[[ inputs.appName ]], 유닛 테스트":
  extends: 
    - ".$[[ inputs.appName ]].variables"
    - .pip_pull
    - ".$[[ inputs.appName ]].when_apps_changed"
  image: ${PYTHON_IMAGE}
  stage: test
  script:
    - cd "${APPS_DIR}"
    - pip install -r "$DEVOPS_DIR/test-requirements.txt"
    - export SERVICE_ID="CI TEST :)"
    - pytest

"$[[ inputs.appName ]], 헬름 차트 배포":
  extends: 
    - ".$[[ inputs.appName ]].variables"
    - .helm_push
    - ".$[[ inputs.appName ]].when_devops_changed" 
  stage: push

"$[[ inputs.appName ]], Argo로 배포(차트 포함 갱신)": 
  extends: 
    - ".$[[ inputs.appName ]].variables"
    - .argo_refresh
    - .general_skip_deploy_not_needed
    - ".$[[ inputs.appName ]].when_devops_changed"
  stage: deploy
  needs:
    - "$[[ inputs.appName ]], 헬름 차트 배포" # 헬름 업로드 이후 진행
  
"$[[ inputs.appName ]], Argo로 배포(이미지만 갱신)": # 차트는 바뀌지 않은 경우
  extends: 
    - ".$[[ inputs.appName ]].variables"
    - .argo_refresh
    - .general_skip_deploy_not_needed
    - ".$[[ inputs.appName ]].skip_devops_changed"
    - ".$[[ inputs.appName ]].when_apps_changed"
  stage: deploy
