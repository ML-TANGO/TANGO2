apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.global.jfb.name.image }}
  namespace: {{ .Values.global.jfb.namespace }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{ .Values.global.jfb.name.image }}
  template:
    metadata:
      labels:
        app: {{ .Values.global.jfb.name.image }}
        {{- include "lib.label.jfb" . | nindent 8 }}
      annotations:
        "acryl.ai/appType": system
        checksum/config: {{ include "lib.lookup.settings" . }}
    spec:
      serviceAccountName: {{ .Values.global.jfb.namespace }}-image-sa
      nodeSelector:
      {{- include "lib.nodeSelector.manage" . | nindent 8 }}
      initContainers:
      {{- include "lib.initContainer.db" . | nindent 6}}
      {{/*
      - name: init
        image: {{ .Values.global.jfb.image.registry }}/{{ .Values.global.jfb.image.image }}
        imagePullPolicy: {{ .Values.global.jfb.image.pullPolicy }}
        command: [ "/bin/bash", "-c"]
        args: ["cd /app/src; python3 init.py"]
        envFrom:
        - configMapRef:
            name: jfb-settings
        volumeMounts:
        {{- include "lib.volume.volumeMounts" (dict "name" "jf-src" "enabled" .Values.global.jfb.volume.src.enabled ) | nindent 8 }}
      */}}
      {{- if .Values.global.jfb.image.pullSecrets.enabled }}
      imagePullSecrets:
      - name: {{ .Values.global.jfb.image.pullSecrets.name }}
      {{- end }}
      containers:
      - name: {{ .Values.global.jfb.name.image }}
        image: {{ .Values.global.jfb.image.registry }}/{{ .Values.global.jfb.image.image }}
        imagePullPolicy: {{ .Values.global.jfb.image.pullPolicy }}
        command: [ "/bin/bash", "-c"]
        args: ["cd /app; ./run.sh; sleep infinity;"]
        ports:
        - containerPort: 8000
        envFrom:
        - configMapRef:
            name: jfb-settings
        {{- include "lib.probe.readiness" (dict "app" "image" )  | nindent 8 }}
        {{- include "lib.probe.liveness" (dict "app" "image" )  | nindent 8 }}
        securityContext:
          privileged: true
        volumeMounts:
        - name: socket
          mountPath: /run/containerd/containerd.sock
        {{- include "lib.volume.volumeMounts" (dict "name" "images" ) | nindent 8 }}
        {{- include "lib.volume.volumeMounts" (dict "name" "jf-kube" )  | nindent 8 }}
        {{- include "lib.volume.volumeMounts" (dict "name" "jf-src" "enabled" .Values.global.jfb.volume.src.enabled ) | nindent 8 }}
      - name: status
        image: {{ .Values.global.jfb.image.registry }}/{{ .Values.global.jfb.image.image }}
        imagePullPolicy: {{ .Values.global.jfb.image.pullPolicy }}
        command: [ "/bin/bash", "-c"]
        args: ["containerd & cd /app/src/image; python3 status.py; while true; do sleep 30; done;"]
        ports:
        - containerPort: 8001
        envFrom:
        - configMapRef:
            name: jfb-settings
        securityContext:
          privileged: true
        volumeMounts:
        - name: socket
          mountPath: /run/containerd/containerd.sock
        {{- include "lib.volume.volumeMounts" (dict "name" "jf-kube" )  | nindent 8 }}
        {{- include "lib.volume.volumeMounts" (dict "name" "jf-src" "enabled" .Values.global.jfb.volume.src.enabled ) | nindent 8 }}
      volumes:
      - name: socket
        hostPath:
          type: Socket
          path: /run/containerd/containerd.sock
      {{- include "lib.volume.claim" (dict "name" "jf-data")  | nindent 6 }}
      {{- include "lib.volume.claim" (dict "name" "jf-kube")  | nindent 6 }}
      {{- include "lib.volume.claim" (dict "name" "jf-src" "app" "image" "enabled" .Values.global.jfb.volume.src.enabled ) | nindent 6 }}

{{/*
        volumeMounts:
        - name: certs-ca
          mountPath: /certs/ca
        - name: certs-client
          mountPath: /certs/client
        - name: certs-registry
          mountPath: /etc/docker/certs.d/{{ .Values.global.jfb.image.registry }}/ca.crt
          subPath: ca.crt
      volumes:
      - name: certs-ca
        emptyDir: {}
      - name: certs-client
        emptyDir: {}
      - name: certs-registry
        configMap:
          name: jfb-{{ .developer }}-registry-ca
          items:
          - key: ca.crt
            path: ca.crt
*/}}