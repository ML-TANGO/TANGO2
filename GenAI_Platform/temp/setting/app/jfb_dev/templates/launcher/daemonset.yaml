apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: jfb-{{ .Values.global.developer }}-launcher
  namespace: {{ .Values.global.developer }}
  annotations:
    "helm.sh/hook": post-install
    "helm.sh/hook-weight": "5"
spec:
  selector:
    matchLabels:
      app: jfb-{{ .Values.global.developer }}-launcher
  template:
    metadata:
      labels:
        app: jfb-{{ .Values.global.developer }}-launcher
    spec:
      hostNetwork: true
      tolerations:
      # 이 톨러레이션(toleration)은 데몬셋이 컨트롤 플레인 노드에서 실행될 수 있도록 만든다.
      # 컨트롤 플레인 노드가 이 파드를 실행해서는 안 되는 경우, 이 톨러레이션을 제거한다.
      - key: node-role.kubernetes.io/control-plane
        operator: Exists
        effect: NoSchedule
      - key: node-role.kubernetes.io/master
        operator: Exists
        effect: NoSchedule
      containers:
      - name: jfb-{{ .Values.global.developer }}-launcher
        image: {{ .Values.image.registry }}/{{ .Values.image.launcher }}
        imagePullPolicy: Always
        command: [ "/bin/bash", "-c",]
        args: ["cd /app; ./run.sh; while true; do sleep 30; done;"]
        ports:
        - containerPort: {{ include "launcher.hostPort" . | int }}
        env:
          - name: LAUNCHER_HOST_PORT
            value: "{{ include "launcher.hostPort" . }}"
        envFrom:
        - configMapRef:
            name: jfb-{{ .Values.global.developer }}-settings-cm
        {{- $volumeValue := dict -}}
        {{- $_ := set $volumeValue "dir" (list "kube" "data_image") }}
        {{- $_ := set $volumeValue "developer" .Values.global.developer }}
        {{- $_ := set $volumeValue "app" "launcher" }}
        volumeMounts:
          - name: launcher-kube
            mountPath: /root/.kube
          - name: launcher-docker
            mountPath: /var/run/docker.sock
      volumes:
      - name: launcher-kube
        persistentVolumeClaim:
          claimName: jfb-{{ .Values.global.developer }}-kube-pvc
      - name: launcher-docker
        persistentVolumeClaim:
          claimName: jfb-{{ .Values.global.developer }}-docker-pvc
