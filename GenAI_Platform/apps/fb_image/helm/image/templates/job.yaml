apiVersion: batch/v1
kind: Job
metadata: 
  name: {{ .Values.common.imageType }}-{{ .Values.common.imageId }}
  namespace: {{ .Values.common.systemNamespace }}-image
  annotations:
    acryl.ai/appType: system
spec:
  backoffLimit: 0
  template:
    spec:
      restartPolicy: OnFailure
      hostNetwork: true
      hostIPC: true  #TODO JI Docker에서 사용하는 부분이 있음
      restartPolicy: Never
      terminationGracePeriodSeconds: 0
      {{- if .Values.commit.nodeName }}
      nodeName: {{ .Values.commit.nodeName }}
      {{- end }}
      {{- if .Values.tag.nodeName }}
      nodeName: {{ .Values.tag.nodeName }}
      {{- end }}
      securityContext:
        fsGroup: 0 # fsGroup은 spec 하위에서 설정
      containers:
      - name: {{ .Values.common.imageType }}
        image: {{ .Values.common.systemRegistryUrl }}{{ .Values.common.systemAppImage }}
        imagePullPolicy: IfNotPresent
        securityContext:
          privileged: true
          capabilities:
            add: ["ALL"]  # 필요한 capabilities 추가
          runAsUser: 0
          runAsGroup: 0
        command: ['/bin/bash', '-c', {{ include "command" . }}]
        volumeMounts:
        {{- include "volumeMounts.containerRuntime" . | nindent 8}}
        {{- include "volumeMounts.imageData" . | nindent 8}}
        {{- include "volumeMounts.imageSecret" . | nindent 8}}
      volumes:
      {{- include "volume.containerRuntime" . | nindent 6}}
      {{- include "volume.imageData" . | nindent 6}}
      {{- include "volume.imageSecret" . | nindent 6}}




{{/*
        - name: root
          mountPath: /var/lib/containerd
    - name: root
      hostPath:
        path: /var/lib/containerd
---
apiVersion: v1
kind: Pod
metadata: 
  name:  {{ .Values.common.imageType }}-{{ .Values.common.imageId }}
  namespace: {{ .Values.common.systemNamespace }}-image
spec:
  restartPolicy: OnFailure
  hostNetwork: true
  hostIPC: true  #TODO JI Docker에서 사용하는 부분이 있음
  restartPolicy: Never
  terminationGracePeriodSeconds: 0
  {{- if .Values.commit.nodeName }}
  nodeName: {{ .Values.commit.nodeName }}
  {{- end }}
  {{- if .Values.tag.nodeName }}
  nodeName: {{ .Values.tag.nodeName }}
  {{- end }}
  securityContext:
    fsGroup: 0 # fsGroup은 spec 하위에서 설정
  containers:
  - name: {{ .Values.common.imageType }}
    image: {{ .Values.common.systemRegistryUrl }}{{ .Values.common.systemAppImage }}
    imagePullPolicy: IfNotPresent
    securityContext:
      privileged: true
      capabilities:
        add: ["ALL"]  # 필요한 capabilities 추가
      runAsUser: 0
      runAsGroup: 0
    command: ['/bin/bash', '-c', {{ include "command" . }}]
    volumeMounts:
    {{- include "volumeMounts.containerRuntime" . | nindent 8}}
    {{- if or (eq .Values.common.imageType "build") (eq .Values.common.imageType "tar")  }}
    - name: jf-data
      mountPath: /jf-data
    {{- end }}
  volumes:
  {{- include "volume.containerRuntime" . | nindent 6}}
  {{- if or (eq .Values.common.imageType "build") (eq .Values.common.imageType "tar") }}
  - name: jf-data
    persistentVolumeClaim:
      claimName: jfb-{{ .Values.common.systemNamespace }}-data-images-pvc
  {{- end }}

*/}}