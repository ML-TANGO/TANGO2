// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.6.1
// source: logquery/logquery.proto

package go_poc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	LogQueryService_QueryWorkspaceDashboardLogs_FullMethodName = "/logquery.LogQueryService/QueryWorkspaceDashboardLogs"
	LogQueryService_QueryAdminDashboardLogs_FullMethodName     = "/logquery.LogQueryService/QueryAdminDashboardLogs"
	LogQueryService_QueryAdminDetailLogs_FullMethodName        = "/logquery.LogQueryService/QueryAdminDetailLogs"
	LogQueryService_QueryTrainingFigureLogs_FullMethodName     = "/logquery.LogQueryService/QueryTrainingFigureLogs"
	LogQueryService_QueryTrainingAllLogs_FullMethodName        = "/logquery.LogQueryService/QueryTrainingAllLogs"
	LogQueryService_QueryDeploymentAllLogs_FullMethodName      = "/logquery.LogQueryService/QueryDeploymentAllLogs"
	LogQueryService_QueryImageAllLogs_FullMethodName           = "/logquery.LogQueryService/QueryImageAllLogs"
)

// LogQueryServiceClient is the client API for LogQueryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LogQueryServiceClient interface {
	QueryWorkspaceDashboardLogs(ctx context.Context, in *WorkspaceDashboardRequest, opts ...grpc.CallOption) (*SummaryLogsResponse, error)
	QueryAdminDashboardLogs(ctx context.Context, in *AdminDashboardRequest, opts ...grpc.CallOption) (*SummaryLogsResponse, error)
	QueryAdminDetailLogs(ctx context.Context, in *AdminDetailRequest, opts ...grpc.CallOption) (*SummaryLogsResponse, error)
	QueryTrainingFigureLogs(ctx context.Context, in *TrainingFigureRequest, opts ...grpc.CallOption) (*SummaryLogsResponse, error)
	QueryTrainingAllLogs(ctx context.Context, in *TrainingAllRequest, opts ...grpc.CallOption) (*SummaryLogsResponse, error)
	QueryDeploymentAllLogs(ctx context.Context, in *DeploymentAllRequest, opts ...grpc.CallOption) (*SummaryLogsResponse, error)
	QueryImageAllLogs(ctx context.Context, in *ImageAllRequest, opts ...grpc.CallOption) (*SummaryLogsResponse, error)
}

type logQueryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLogQueryServiceClient(cc grpc.ClientConnInterface) LogQueryServiceClient {
	return &logQueryServiceClient{cc}
}

func (c *logQueryServiceClient) QueryWorkspaceDashboardLogs(ctx context.Context, in *WorkspaceDashboardRequest, opts ...grpc.CallOption) (*SummaryLogsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SummaryLogsResponse)
	err := c.cc.Invoke(ctx, LogQueryService_QueryWorkspaceDashboardLogs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logQueryServiceClient) QueryAdminDashboardLogs(ctx context.Context, in *AdminDashboardRequest, opts ...grpc.CallOption) (*SummaryLogsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SummaryLogsResponse)
	err := c.cc.Invoke(ctx, LogQueryService_QueryAdminDashboardLogs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logQueryServiceClient) QueryAdminDetailLogs(ctx context.Context, in *AdminDetailRequest, opts ...grpc.CallOption) (*SummaryLogsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SummaryLogsResponse)
	err := c.cc.Invoke(ctx, LogQueryService_QueryAdminDetailLogs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logQueryServiceClient) QueryTrainingFigureLogs(ctx context.Context, in *TrainingFigureRequest, opts ...grpc.CallOption) (*SummaryLogsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SummaryLogsResponse)
	err := c.cc.Invoke(ctx, LogQueryService_QueryTrainingFigureLogs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logQueryServiceClient) QueryTrainingAllLogs(ctx context.Context, in *TrainingAllRequest, opts ...grpc.CallOption) (*SummaryLogsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SummaryLogsResponse)
	err := c.cc.Invoke(ctx, LogQueryService_QueryTrainingAllLogs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logQueryServiceClient) QueryDeploymentAllLogs(ctx context.Context, in *DeploymentAllRequest, opts ...grpc.CallOption) (*SummaryLogsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SummaryLogsResponse)
	err := c.cc.Invoke(ctx, LogQueryService_QueryDeploymentAllLogs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logQueryServiceClient) QueryImageAllLogs(ctx context.Context, in *ImageAllRequest, opts ...grpc.CallOption) (*SummaryLogsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SummaryLogsResponse)
	err := c.cc.Invoke(ctx, LogQueryService_QueryImageAllLogs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LogQueryServiceServer is the server API for LogQueryService service.
// All implementations must embed UnimplementedLogQueryServiceServer
// for forward compatibility
type LogQueryServiceServer interface {
	QueryWorkspaceDashboardLogs(context.Context, *WorkspaceDashboardRequest) (*SummaryLogsResponse, error)
	QueryAdminDashboardLogs(context.Context, *AdminDashboardRequest) (*SummaryLogsResponse, error)
	QueryAdminDetailLogs(context.Context, *AdminDetailRequest) (*SummaryLogsResponse, error)
	QueryTrainingFigureLogs(context.Context, *TrainingFigureRequest) (*SummaryLogsResponse, error)
	QueryTrainingAllLogs(context.Context, *TrainingAllRequest) (*SummaryLogsResponse, error)
	QueryDeploymentAllLogs(context.Context, *DeploymentAllRequest) (*SummaryLogsResponse, error)
	QueryImageAllLogs(context.Context, *ImageAllRequest) (*SummaryLogsResponse, error)
	mustEmbedUnimplementedLogQueryServiceServer()
}

// UnimplementedLogQueryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLogQueryServiceServer struct {
}

func (UnimplementedLogQueryServiceServer) QueryWorkspaceDashboardLogs(context.Context, *WorkspaceDashboardRequest) (*SummaryLogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryWorkspaceDashboardLogs not implemented")
}
func (UnimplementedLogQueryServiceServer) QueryAdminDashboardLogs(context.Context, *AdminDashboardRequest) (*SummaryLogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryAdminDashboardLogs not implemented")
}
func (UnimplementedLogQueryServiceServer) QueryAdminDetailLogs(context.Context, *AdminDetailRequest) (*SummaryLogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryAdminDetailLogs not implemented")
}
func (UnimplementedLogQueryServiceServer) QueryTrainingFigureLogs(context.Context, *TrainingFigureRequest) (*SummaryLogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryTrainingFigureLogs not implemented")
}
func (UnimplementedLogQueryServiceServer) QueryTrainingAllLogs(context.Context, *TrainingAllRequest) (*SummaryLogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryTrainingAllLogs not implemented")
}
func (UnimplementedLogQueryServiceServer) QueryDeploymentAllLogs(context.Context, *DeploymentAllRequest) (*SummaryLogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryDeploymentAllLogs not implemented")
}
func (UnimplementedLogQueryServiceServer) QueryImageAllLogs(context.Context, *ImageAllRequest) (*SummaryLogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryImageAllLogs not implemented")
}
func (UnimplementedLogQueryServiceServer) mustEmbedUnimplementedLogQueryServiceServer() {}

// UnsafeLogQueryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LogQueryServiceServer will
// result in compilation errors.
type UnsafeLogQueryServiceServer interface {
	mustEmbedUnimplementedLogQueryServiceServer()
}

func RegisterLogQueryServiceServer(s grpc.ServiceRegistrar, srv LogQueryServiceServer) {
	s.RegisterService(&LogQueryService_ServiceDesc, srv)
}

func _LogQueryService_QueryWorkspaceDashboardLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkspaceDashboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogQueryServiceServer).QueryWorkspaceDashboardLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LogQueryService_QueryWorkspaceDashboardLogs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogQueryServiceServer).QueryWorkspaceDashboardLogs(ctx, req.(*WorkspaceDashboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogQueryService_QueryAdminDashboardLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminDashboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogQueryServiceServer).QueryAdminDashboardLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LogQueryService_QueryAdminDashboardLogs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogQueryServiceServer).QueryAdminDashboardLogs(ctx, req.(*AdminDashboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogQueryService_QueryAdminDetailLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogQueryServiceServer).QueryAdminDetailLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LogQueryService_QueryAdminDetailLogs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogQueryServiceServer).QueryAdminDetailLogs(ctx, req.(*AdminDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogQueryService_QueryTrainingFigureLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrainingFigureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogQueryServiceServer).QueryTrainingFigureLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LogQueryService_QueryTrainingFigureLogs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogQueryServiceServer).QueryTrainingFigureLogs(ctx, req.(*TrainingFigureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogQueryService_QueryTrainingAllLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrainingAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogQueryServiceServer).QueryTrainingAllLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LogQueryService_QueryTrainingAllLogs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogQueryServiceServer).QueryTrainingAllLogs(ctx, req.(*TrainingAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogQueryService_QueryDeploymentAllLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeploymentAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogQueryServiceServer).QueryDeploymentAllLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LogQueryService_QueryDeploymentAllLogs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogQueryServiceServer).QueryDeploymentAllLogs(ctx, req.(*DeploymentAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogQueryService_QueryImageAllLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImageAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogQueryServiceServer).QueryImageAllLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LogQueryService_QueryImageAllLogs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogQueryServiceServer).QueryImageAllLogs(ctx, req.(*ImageAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LogQueryService_ServiceDesc is the grpc.ServiceDesc for LogQueryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LogQueryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "logquery.LogQueryService",
	HandlerType: (*LogQueryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueryWorkspaceDashboardLogs",
			Handler:    _LogQueryService_QueryWorkspaceDashboardLogs_Handler,
		},
		{
			MethodName: "QueryAdminDashboardLogs",
			Handler:    _LogQueryService_QueryAdminDashboardLogs_Handler,
		},
		{
			MethodName: "QueryAdminDetailLogs",
			Handler:    _LogQueryService_QueryAdminDetailLogs_Handler,
		},
		{
			MethodName: "QueryTrainingFigureLogs",
			Handler:    _LogQueryService_QueryTrainingFigureLogs_Handler,
		},
		{
			MethodName: "QueryTrainingAllLogs",
			Handler:    _LogQueryService_QueryTrainingAllLogs_Handler,
		},
		{
			MethodName: "QueryDeploymentAllLogs",
			Handler:    _LogQueryService_QueryDeploymentAllLogs_Handler,
		},
		{
			MethodName: "QueryImageAllLogs",
			Handler:    _LogQueryService_QueryImageAllLogs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "logquery/logquery.proto",
}
