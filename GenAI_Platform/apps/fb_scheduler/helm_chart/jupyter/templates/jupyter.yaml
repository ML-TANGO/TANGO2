{{- range $index, $node := .Values.cluster }}
apiVersion: v1
kind: Pod
metadata:
  annotations:
    acryl.ai/appType: user
  labels:
    {{- range $key, $val := $.Values.labels }}
    {{ $key }}: {{ $val | quote }}
    {{- end}}
    role: "jfb-user-function"
    index: "{{ $index }}"
    gpu_ids: {{ $node.gpu_ids | default "" | quote }}
    node_name: {{ $node.node_name | default "" | quote }}
  name: {{ $.Values.pod_name }}-{{ $index }}
  namespace: {{ $.Values.system.namespace }}-{{ $.Values.labels.workspace_id }}
spec:
  hostname: {{ $.Values.spec.hostname }}
  {{- if $node.node_name }}
  nodeName: {{ $node.node_name }}
  {{- end }}
  {{- if $.Values.spec.cpu_instance }}
  nodeSelector:
    jfb/cpu-instance.name: {{ $.Values.spec.cpu_instance }}
  {{- end }}
  {{- if $.Values.pullSecrets }}
  imagePullSecrets:
  - name: {{ $.Values.pullSecrets }}
  {{- end }}
  containers:
  - command:
    - /bin/bash
    - -c
    - |
      {{- if $.Values.nexus.hostname }}
      echo "deb [trusted=yes] http://{{ $.Values.nexus.hostname }}:{{ $.Values.nexus.port }}{{ $.Values.nexus.apt.path }}/ focal main" > /etc/apt/sources.list
      {{- end }}
      {{- if ge $.Values.total_gpu_count 2 }}
      cd /distributed; ./init.sh && ./run.sh;
      cd $JF_HOME
      {{- else }}
      apt update
      apt install -y sudo openssh-client openssh-server net-tools iproute2

      {{- end }}
      {{- if eq $index 0 }}
      (
        echo "==================="
        echo "change root password"
        echo "==================="
        cd /support; ./root_password_change.sh '{{ $.Values.tool_password }}'
      );
      (
      # Python 버전 확인
      PYTHON_VERSION=$(python3 -c "import sys; print(f'{sys.version_info.major}.{sys.version_info.minor}')")

      cd $JF_HOME && export SHELL=/bin/bash


      # Node.js 설치 (최신 LTS 버전)
      curl -fsSL https://deb.nodesource.com/setup_lts.x | bash -
      apt-get update && apt -y install nodejs gcc g++ make curl git

      # Yarn GPG 키 추가 및 설치 (최신 버전)
      curl -sL https://dl.yarnpkg.com/debian/pubkey.gpg | gpg --dearmor | tee /usr/share/keyrings/yarnkey.gpg >/dev/null
      echo "deb [signed-by=/usr/share/keyrings/yarnkey.gpg] https://dl.yarnpkg.com/debian stable main" | tee /etc/apt/sources.list.d/yarn.list
      apt-get update && apt-get install -y yarn

      echo "======================================================"
      echo "node version."
      node --version
      echo "yarn version."
      yarn --version
      echo "======================================================"


      # pip3 설치 및 업그레이드
      pip3 --version || (apt-get install -y python3-distutils && curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py && python3 get-pip.py --force-reinstall && rm get-pip.py)

      # 환경 변수 갱신
      export PATH=$PATH:~/.local/bin

      # Jupyter가 이미 설치되어 있는지 확인
      if command -v jupyter &> /dev/null
      then
          echo "======================================================"
          echo "Jupyter is already installed. Skipping installation."
          echo "======================================================"
      else
          echo "======================================================"
          echo "Jupyter installation."
          echo "======================================================"
          DEBIAN_FRONTEND=noninteractive apt install -y tzdata
          # jupyter 설치
          pip3 install jupyter-core --no-warn-script-location
          # jupyterlab 설치
          pip3 install jupyterlab --no-warn-script-location
          # jupyterlab-git 설치

          pip3 install jupyterlab-git --no-warn-script-location
          # ipympl 설치 및 jupyter labextension 설치
          pip3 install ipympl --no-warn-script-location
          jupyter labextension install @jupyter-widgets/jupyterlab-manager jupyter-matplotlib @jupyterlab/git
          
      fi
      


      # 환경 변수 다시 갱신
      source $HOME/.bashrc

      # jupyter 설치 경로 확인
      which jupyter

      # Jupyter Lab 실행
      # jupyter lab clean
      # jupyter lab build
      jupyter lab --allow-root --ip 0.0.0.0 --notebook-dir=$JF_HOME --NotebookApp.base_url=/jupyter/{{ $.Values.pod_name }}-{{ $index }}/ --NotebookApp.allow_origin=*
      ); sleep infinity;
      {{- else }}
      while true; do sleep 30; done;
      {{- end }}
    env:
    {{- range $key, $val := $.Values.spec.containers.env }}
    - name: {{ $key }}
      value: {{ $val | quote }}
    {{- end}}
    - name: JF_NUM_GPUS
      value: "{{ $node.gpu_count }}"
    - name: JF_POD_INDEX
      value: {{ $index | quote }}
    - name: JF_NUM_PODS
      value: {{ len $.Values.cluster | quote }}
    - name: DEBIAN_FRONTEND
      value: noninteractive
    {{- if $node.gpu_uuids }}
    - name: "CUDA_VISIBLE_DEVICES"
      value: {{ $node.gpu_uuids }}
    - name: "NVIDIA_VISIBLE_DEVICES"
      value: {{ $node.gpu_uuids }}
    {{- end }}
    {{- if eq $index 0 }}
    readinessProbe:
      httpGet:
        path: /jupyter/{{ $.Values.pod_name }}-{{ $index }}/api
        port: 8888
      initialDelaySeconds: 10
      periodSeconds: 5
      timeoutSeconds: 3
      successThreshold: 1
    {{- end }}
    image: {{ $.Values.spec.containers.image }}
    imagePullPolicy: IfNotPresent
    lifecycle:
      postStart:
        exec:
          command:
          - /bin/sh
          - -c
          - echo START
      preStop:
        exec:
          command:
          - /bin/sh
          - -c
          - echo END
    name: "{{ $.Values.labels.project_tool_type }}"
    resources:
      limits:
        cpu : {{ $.Values.spec.containers.resource.limits.cpu }}
        memory : {{ $.Values.spec.containers.resource.limits.memory }}
        nvidia.com/gpu: {{ $node.gpu_count }}
      requests:
        cpu : 0.01
        memory : "10M"
        nvidia.com/gpu: {{ $node.gpu_count }}
    securityContext:
      capabilities:
        add:
        - IPC_LOCK
      privileged: false # TODO 기존과 같게 할건지 확인 필요
      runAsGroup: 0
      runAsUser: 0
    volumeMounts:
    - name: jf-main
      mountPath: {{ $.Values.spec.containers.env.JF_HOME}} 
      subPath: projects/{{ $.Values.labels.project_name }}
    - name: jf-data
      mountPath: {{ $.Values.spec.containers.env.JF_HOME}}/datasets_ro
      subPath: "0"
      readOnly: true
    - name: jf-data
      mountPath: {{ $.Values.spec.containers.env.JF_HOME}}/datasets_rw
      subPath: "1"
      {{- if ge $.Values.total_gpu_count 2 }}
      # 분산학습 프레임워크 적용 
    - name: jf-bin
      mountPath: /distributed
      subPath: distributed
      readOnly: true
      {{- end }}
    - name: jf-bin
      mountPath: /support # 오프라인 pod에서 설치할 수 있도록 바이너리 파일 모음 폴더
      subPath: support
      readOnly: true
    - name: jf-bin
      mountPath: /addlib # 배포 api 코드 임포트 라이브러리 
      subPath: deployment_log
    {{- if $.Values.nexus.hostname }}
    - name: pip-config
      mountPath: /etc/pip.conf
      subPath: pip.conf
    {{- end }}
  dnsPolicy: ClusterFirst
  enableServiceLinks: true
  hostIPC: true
  restartPolicy: {{ $.Values.spec.restartPolicy }}
  terminationGracePeriodSeconds: 0
  volumes:
  {{- if $.Values.nexus.hostname }}
  - name: pip-config-{{ $.Values.pod_name }}
      configMap:
        name: pip-config
  {{- end }}
  - name: jf-main
    persistentVolumeClaim:
      claimName: {{ $.Values.system.namespace }}-{{ $.Values.labels.workspace_id }}-main-pvc
  - name: jf-data
    persistentVolumeClaim:
      claimName: {{ $.Values.system.namespace }}-{{ $.Values.labels.workspace_id }}-data-pvc
  - name: jf-bin
    persistentVolumeClaim:
      claimName: {{ $.Values.system.namespace }}-{{ $.Values.labels.workspace_id }}-bin-pvc
---
{{- end }}

