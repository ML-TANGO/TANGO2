{{- range $index, $node := .Values.cluster }}
apiVersion: v1
kind: Pod
metadata:
  annotations:
    acryl.ai/appType: user
  labels:
    {{- range $key, $val := $.Values.labels }}
    {{ $key }}: {{ $val | quote }}
    {{- end}}
    role: "jfb-user-function"
    index: "{{ $index }}"
    gpu_ids: {{ $node.gpu_ids | default "" | quote }}
    node_name: {{ $node.node_name | default "" | quote }}
  name: {{ $.Values.pod_name }}-{{ $index }}
  namespace: {{ $.Values.system.namespace }}-{{ $.Values.labels.workspace_id }}
spec:
  hostname: {{ $.Values.spec.hostname }}
  {{- if $node.node_name }}
  nodeName: {{ $node.node_name }}
  {{- end }}
  {{- if $.Values.spec.cpu_instance }}
  nodeSelector:
    jfb/cpu-instance.name: {{ $.Values.spec.cpu_instance }}
  {{- end }}
  {{- if $.Values.pullSecrets }}
  imagePullSecrets:
  - name: {{ $.Values.pullSecrets }}
  {{- end }}
  containers:
  - command:
    - /bin/bash
    - -c
    - |
      {{- if $.Values.nexus.hostname }}
      echo "deb [trusted=yes] http://{{ $.Values.nexus.hostname }}:{{ $.Values.nexus.port }}{{ $.Values.nexus.apt.path }}/ focal main" > /etc/apt/sources.list
      {{- end }}
      {{- if ge $.Values.total_gpu_count 2 }}
      cd /distributed; ./init.sh && ./run.sh;
      cd $JF_HOME
      {{- else }}
      apt update
      apt install -y sudo openssh-client openssh-server net-tools iproute2

      {{- end }}
      {{- if eq $index 0 }}
      (
        echo "==================="
        echo "change root password"
        echo "==================="
        cd /support; ./root_password_change.sh "{{ $.Values.tool_password }}"
      );
      (
      echo "==================="
      echo "install default package"
      echo "==================="
      apt-get update && apt-get install -y wget curl git

      echo "==================="
      echo "check package and install code server"
      echo "==================="
      # Locate the code-server executable
      code_server_path=$(which code-server)

      # Check if the code-server executable was found
      if [ -x "$code_server_path" ]; then
          echo "code-server is installed at: $code_server_path"
          # Optionally, check and display the version
          $code_server_path --version
      else
          echo "code-server is not installed on this system."
          # Check if wget or curl is available
          if command -v wget &>/dev/null; then
              echo "==================="
              echo "Using wget to download code-server"
              echo "==================="
              wget -qO- https://code-server.dev/install.sh | sh
          elif command -v curl &>/dev/null; then
              echo "==================="
              echo "Using curl to download code-server"
              echo "==================="
              curl -fsSL https://code-server.dev/install.sh | sh
          else
              echo "==================="
              echo "Neither wget nor curl was found, installing wget and curl"
              echo "==================="
              apt-get update && apt-get install -y wget curl
              wget -qO- https://code-server.dev/install.sh | sh
          fi
      fi

      ); ( 
        echo "==================="
        echo "start code server"
        echo "==================="
        whoami

        # Install extension and start code-server
        code-server --install-extension ms-python.python
        # https://github.com/coder/code-server/commit/93e60f7b0e524153d1cb16f95b17ca8208c7c219
        {{- if $.Values.domain }}
        code-server --bind-addr 0.0.0.0:8080 --auth none --trusted-origins={{ $.Values.domain }} --log debug $JF_HOME
        {{- else }}
        code-server --bind-addr 0.0.0.0:8080 --auth none --log debug $JF_HOME
        {{- end}}
        );
        {{- else }}
        echo {{ $index }}
        while true; do sleep 30; done;
        {{- end }}
    env:
    {{- range $key, $val := $.Values.spec.containers.env }}
    - name: {{ $key }}
      value: {{ $val | quote }}
    {{- end}}
    - name: JF_NUM_GPUS
      value: "{{ $node.gpu_count }}"
    - name: JF_NUM_PODS
      value: {{ len $.Values.cluster | quote }}
    - name: JF_POD_INDEX
      value: {{ $index | quote }}
    - name: DEBIAN_FRONTEND
      value: noninteractive
    {{- if $node.gpu_uuids }}
    - name: "CUDA_VISIBLE_DEVICES"
      value: {{ $node.gpu_uuids }}
    - name: "NVIDIA_VISIBLE_DEVICES"
      value: {{ $node.gpu_uuids }}
    {{- end }}
    {{- if eq $index 0 }}
    readinessProbe:
      httpGet:
        path: /healthz
        port: 8080
      initialDelaySeconds: 15
      periodSeconds: 5
      timeoutSeconds: 3
      successThreshold: 1
    {{- end }}
    image: {{ $.Values.spec.containers.image }}
    imagePullPolicy: IfNotPresent
    lifecycle:
      postStart:
        exec:
          command:
          - /bin/sh
          - -c
          - echo START
      preStop:
        exec:
          command:
          - /bin/sh
          - -c
          - echo END
    name: "{{ $.Values.labels.project_tool_type }}"
    resources:
      limits:
        cpu : {{ $.Values.spec.containers.resource.limits.cpu }}
        memory : {{ $.Values.spec.containers.resource.limits.memory }}
        nvidia.com/gpu: {{ $node.gpu_count }}
      requests:
        cpu : 0.01
        memory : "10M"
        nvidia.com/gpu: {{ $node.gpu_count }}
    securityContext:
      capabilities:
        add:
        - IPC_LOCK
      privileged: false # TODO 기존과 같게 할건지 확인 필요
      runAsGroup: 0
      runAsUser: 0
    volumeMounts:
    - name: jf-main
      mountPath: {{ $.Values.spec.containers.env.JF_HOME}}
      subPath: projects/{{ $.Values.labels.project_name }}
    - name: jf-data
      mountPath: {{ $.Values.spec.containers.env.JF_HOME}}/datasets_ro
      subPath: "0"
      readOnly: true
    - name: jf-data
      mountPath: {{ $.Values.spec.containers.env.JF_HOME}}/datasets_rw
      subPath: "1"
      {{- if ge $.Values.total_gpu_count 2 }}
      # 분산학습 프레임워크 적용 
    - name: jf-bin
      mountPath: /distributed
      subPath: distributed
      readOnly: true
      {{- end }}
    - name: jf-bin
      mountPath: /support # 오프라인 pod에서 설치할 수 있도록 바이너리 파일 모음 폴더
      subPath: support
      readOnly: true
    - name: jf-bin
      mountPath: /addlib
      subPath: deployment_log
    {{- if $.Values.nexus.hostname }}
    - name: pip-config
      mountPath: /etc/pip.conf
      subPath: pip.conf
    {{- end }}
  dnsPolicy: ClusterFirst
  enableServiceLinks: true
  hostIPC: true
  restartPolicy: {{ $.Values.spec.restartPolicy }}
  terminationGracePeriodSeconds: 0
  volumes:
  {{- if $.Values.nexus.hostname }}
  - name: pip-config-{{ $.Values.pod_name }}
      configMap:
        name: pip-config
  {{- end }}
  - name: jf-main
    persistentVolumeClaim:
      claimName: {{ $.Values.system.namespace }}-{{ $.Values.labels.workspace_id }}-main-pvc
  - name: jf-data
    persistentVolumeClaim:
      claimName: {{ $.Values.system.namespace }}-{{ $.Values.labels.workspace_id }}-data-pvc
  - name: jf-bin
    persistentVolumeClaim:
      claimName: {{ $.Values.system.namespace }}-{{ $.Values.labels.workspace_id }}-bin-pvc
---
{{- end }}

