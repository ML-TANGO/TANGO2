// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: collects.proto

package collects

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Collects_Send_FullMethodName       = "/collects.Collects/Send"
	Collects_Statistics_FullMethodName = "/collects.Collects/Statistics"
)

// CollectsClient is the client API for Collects service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CollectsClient interface {
	// 데이터 전송
	Send(ctx context.Context, in *ReceiveData, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 수신 통계
	Statistics(ctx context.Context, in *StatisticsRequest, opts ...grpc.CallOption) (*StatisticsResponse, error)
}

type collectsClient struct {
	cc grpc.ClientConnInterface
}

func NewCollectsClient(cc grpc.ClientConnInterface) CollectsClient {
	return &collectsClient{cc}
}

func (c *collectsClient) Send(ctx context.Context, in *ReceiveData, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Collects_Send_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectsClient) Statistics(ctx context.Context, in *StatisticsRequest, opts ...grpc.CallOption) (*StatisticsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatisticsResponse)
	err := c.cc.Invoke(ctx, Collects_Statistics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CollectsServer is the server API for Collects service.
// All implementations must embed UnimplementedCollectsServer
// for forward compatibility.
type CollectsServer interface {
	// 데이터 전송
	Send(context.Context, *ReceiveData) (*emptypb.Empty, error)
	// 수신 통계
	Statistics(context.Context, *StatisticsRequest) (*StatisticsResponse, error)
	mustEmbedUnimplementedCollectsServer()
}

// UnimplementedCollectsServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCollectsServer struct{}

func (UnimplementedCollectsServer) Send(context.Context, *ReceiveData) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Send not implemented")
}
func (UnimplementedCollectsServer) Statistics(context.Context, *StatisticsRequest) (*StatisticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Statistics not implemented")
}
func (UnimplementedCollectsServer) mustEmbedUnimplementedCollectsServer() {}
func (UnimplementedCollectsServer) testEmbeddedByValue()                  {}

// UnsafeCollectsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CollectsServer will
// result in compilation errors.
type UnsafeCollectsServer interface {
	mustEmbedUnimplementedCollectsServer()
}

func RegisterCollectsServer(s grpc.ServiceRegistrar, srv CollectsServer) {
	// If the following call pancis, it indicates UnimplementedCollectsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Collects_ServiceDesc, srv)
}

func _Collects_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReceiveData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectsServer).Send(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Collects_Send_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectsServer).Send(ctx, req.(*ReceiveData))
	}
	return interceptor(ctx, in, info, handler)
}

func _Collects_Statistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatisticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectsServer).Statistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Collects_Statistics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectsServer).Statistics(ctx, req.(*StatisticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Collects_ServiceDesc is the grpc.ServiceDesc for Collects service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Collects_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "collects.Collects",
	HandlerType: (*CollectsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Send",
			Handler:    _Collects_Send_Handler,
		},
		{
			MethodName: "Statistics",
			Handler:    _Collects_Statistics_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "collects.proto",
}
