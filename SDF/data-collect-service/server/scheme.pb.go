// Code generated by protoc-gen-go-pg.
package server

import (
	"github.com/go-pg/pg/v10/orm"
	"gitlab.suredatalab.kr/sdlmicro/middleware/log"
	"gitlab.suredatalab.kr/sdlmicro/middleware/pgorm"

	"gitlab.suredatalab.kr/beymons/collects"
)

var ormModels = []interface{}{
	(*collects.ReceiveHistory)(nil),
	(*collects.ReceiveStatistics)(nil),
	(*collects.ReceiveRssiHistory)(nil),
	(*collects.LastReceivedHistory)(nil),
}

// 테이블 생성 함수
func createScheme() {
	if _, err := pgorm.ConnectDB(); err != nil {
		log.Fatal("DB connection failed", "error", err)
	}

	// DB Connection
	conn := pgorm.Conn()
	defer conn.Close()

	// Create tables
	for _, model := range ormModels {
		if err := conn.Model(model).
			CreateTable(&orm.CreateTableOptions{
				IfNotExists:   true,
				FKConstraints: true,
			}); err != nil {
			log.Fatal("Failed to create table", "error", err)
		}
	}

	queries := []string{
		"SELECT create_hypertable('receive_histories', 'received_at', if_not_exists => true)",
		"SELECT create_hypertable('receive_statistics', 'created_at', if_not_exists => true)",
		"SELECT add_dimension('receive_statistics', 'site_id', number_partitions => 10, if_not_exists => true)",
		"SELECT create_hypertable('receive_rssi_histories', 'received_at', if_not_exists => true)",
		"DO $$\nBEGIN\n    IF NOT EXISTS (\n        SELECT 1\n        FROM information_schema.table_constraints\n        JOIN information_schema.key_column_usage USING (table_name, constraint_name, table_schema)\n        WHERE constraint_type = 'FOREIGN KEY'\n        AND table_schema = current_schema()\n        AND table_name = 'last_received_histories' AND constraint_name = 'last_received_histories_device_id_fk'\n    ) THEN\n        ALTER TABLE last_received_histories ADD CONSTRAINT last_received_histories_device_id_fk FOREIGN KEY (device_id) REFERENCES devices (device_id) ON DELETE CASCADE;\n    END IF;\nEND;\n$$;",
	}

	for i, query := range queries {
		if _, err := conn.Exec(query); err != nil {
			log.Fatalf("Failed to exec[%d]: %s", i, err.Error())
		}
	}
}

// 생성된 테이블 삭제 함수
func deleteScheme() error {
	// DB 연결
	if _, err := pgorm.ConnectDB(); err != nil {
		return err
	}

	// DB Connection
	conn := pgorm.Conn()
	defer conn.Close()

	// 모델 제거
	for _, model := range ormModels {
		if err := conn.Model(model).DropTable(&orm.DropTableOptions{IfExists: true, Cascade: true}); err != nil {
			return err
		}
	}

	return nil
}
